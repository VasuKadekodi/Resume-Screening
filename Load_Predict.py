{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1agQ2Hz3-oKtUYg43B22kFIeBU0vQBzR8","authorship_tag":"ABX9TyOKLZKsUQlaV1ZokLxdDtka"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"O4wouNrrP0Mo","executionInfo":{"status":"ok","timestamp":1684503915516,"user_tz":-330,"elapsed":5,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"outputs":[],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["# To extract text, images, and metadata from PDF documents\n","!pip install pdfminer\n","!pip install pdfminer3\n","!pip install pdfminer.six"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"np4TvSM0QbcH","executionInfo":{"status":"ok","timestamp":1684504630623,"user_tz":-330,"elapsed":45741,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}},"outputId":"a073c7c5-b0f8-4ccb-d8a6-0dbcd3f76ffc"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pdfminer\n","  Using cached pdfminer-20191125.tar.gz (4.2 MB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: pycryptodome in /usr/local/lib/python3.10/dist-packages (from pdfminer) (3.18.0)\n","Building wheels for collected packages: pdfminer\n","  Building wheel for pdfminer (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for pdfminer: filename=pdfminer-20191125-py3-none-any.whl size=6140077 sha256=c607161d4857cb820aad34138beee376ec7b07257bbb7ffad5cfba9e869d78ba\n","  Stored in directory: /root/.cache/pip/wheels/4e/c1/68/f7bd0a8f514661f76b5cbe3b5f76e0033d79f1296012cbbf72\n","Successfully built pdfminer\n","Installing collected packages: pdfminer\n","Successfully installed pdfminer-20191125\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pdfminer3 in /usr/local/lib/python3.10/dist-packages (2018.12.3.0)\n","Requirement already satisfied: pycryptodome in /usr/local/lib/python3.10/dist-packages (from pdfminer3) (3.18.0)\n","Requirement already satisfied: sortedcontainers in /usr/local/lib/python3.10/dist-packages (from pdfminer3) (2.4.0)\n","Requirement already satisfied: chardet in /usr/local/lib/python3.10/dist-packages (from pdfminer3) (4.0.0)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","\u001b[31mERROR: Could not find a version that satisfies the requirement upgrade (from versions: none)\u001b[0m\u001b[31m\n","\u001b[0m\u001b[31mERROR: No matching distribution found for upgrade\u001b[0m\u001b[31m\n","\u001b[0mLooking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting pdfminer.six\n","  Downloading pdfminer.six-20221105-py3-none-any.whl (5.6 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.6/5.6 MB\u001b[0m \u001b[31m47.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: charset-normalizer>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from pdfminer.six) (2.0.12)\n","Requirement already satisfied: cryptography>=36.0.0 in /usr/local/lib/python3.10/dist-packages (from pdfminer.six) (40.0.2)\n","Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.10/dist-packages (from cryptography>=36.0.0->pdfminer.six) (1.15.1)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.12->cryptography>=36.0.0->pdfminer.six) (2.21)\n","Installing collected packages: pdfminer.six\n","Successfully installed pdfminer.six-20221105\n"]}]},{"cell_type":"code","source":["from pdfminer.high_level import extract_text"],"metadata":{"id":"xX5mC9cdSJRn","executionInfo":{"status":"ok","timestamp":1684504698417,"user_tz":-330,"elapsed":2,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["# Extracting text from pdf file\n","text = extract_text('/content/drive/MyDrive/Vasundhara_Kadekodi.pdf')"],"metadata":{"id":"Qbwcta23Scxa","executionInfo":{"status":"ok","timestamp":1684504803610,"user_tz":-330,"elapsed":1462,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# Replace new line characters with spaces\n","text=text.replace('\\n', '')"],"metadata":{"id":"1405E-kCT290","executionInfo":{"status":"ok","timestamp":1684504833431,"user_tz":-330,"elapsed":1,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Replacing multiple spaces with sigle space\n","text=' '.join(text.split())"],"metadata":{"id":"1nl8nNoUT3tp","executionInfo":{"status":"ok","timestamp":1684505171562,"user_tz":-330,"elapsed":2,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["import re\n","import string"],"metadata":{"id":"OmuYGPBuT_PL","executionInfo":{"status":"ok","timestamp":1684505226395,"user_tz":-330,"elapsed":1010,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["punctuations = string.punctuation"],"metadata":{"id":"erS7Pc2DVSBF","executionInfo":{"status":"ok","timestamp":1684505250069,"user_tz":-330,"elapsed":1,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["# Convering all string to lowecase\n","text=text.lower()"],"metadata":{"id":"MkqXEN5JVkG2","executionInfo":{"status":"ok","timestamp":1684505287244,"user_tz":-330,"elapsed":5,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["# removing numbers\n","text=re.sub('r\\d+','',text)"],"metadata":{"id":"ENCvS7szVsAO","executionInfo":{"status":"ok","timestamp":1684505330715,"user_tz":-330,"elapsed":2,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["# Removing punctuation\n","text=text.translate(str.maketrans('','',string.punctuation))"],"metadata":{"id":"fmb6utkyVswP","executionInfo":{"status":"ok","timestamp":1684505447907,"user_tz":-330,"elapsed":2,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["## **Loading the Model**"],"metadata":{"id":"fc1PU2MfWcnA"}},{"cell_type":"code","source":["import pickle\n","from nltk.tokenize import word_tokenize\n","from nltk.corpus import stopwords\n","from nltk.stem import PorterStemmer\n","from sklearn.feature_extraction.text import CountVectorizer"],"metadata":{"id":"C9w3AJqOV5Bu","executionInfo":{"status":"ok","timestamp":1684505603020,"user_tz":-330,"elapsed":3,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["# Loading pre-trained model and vectorizer\n","with open('/content/drive/MyDrive/Projects/Resume Screening/model_Pred.pkl', 'rb') as f:\n","  model= pickle.load(f)\n","\n","with open('/content/drive/MyDrive/Projects/Resume Screening/vectorizer_Pred.pkl', 'rb') as f:\n","  vectorizer = pickle.load(f)"],"metadata":{"id":"CBwpKv6bWYaf","executionInfo":{"status":"ok","timestamp":1684505777908,"user_tz":-330,"elapsed":1,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["text"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":123},"id":"9ZxO6JUYXkzQ","executionInfo":{"status":"ok","timestamp":1684505788142,"user_tz":-330,"elapsed":400,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}},"outputId":"674c73cf-d0e6-4dba-8530-a2911b2c5d7a"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\uf095 91 9483824154\\uf0e0 vasundharalkadekodigmailcom\\uf041 bengaluru karnatakavasundhara kadekodidata analyst\\uf0e1 linkedin\\uf0ac portfoliosummarya datadriven professional over 2 years of experience as a data science intern and statistical expert additionally completed a pg diploma in data science from iiitb the skill set encompasses excellent data manipulation and visualization proficiency in python sql tableau and power bi combined with a passion for analytics with strong communication abilities the aim is to secure a data analyst opportunity and utilize technical skills to drive datadriven decisionmaking and advance business goalskey skills• data collection systems • primary  secondary data sources • eda • develop analysis • machine learning techniques • predictive  statistical modelling • data visualization • cloud computing • statistical techniques • data warehousing • data management • business intelligence • innovative analytical solutions • team coordination  leadership technical skillslanguages python sql r programming sas databases mongodb hive hadoop ms sql server mysqlvisualization tools tableau ms powerbi cloud amazon aws office suites msexcel advance and google sheets microsoft word powerpointprofessional experiencedata analyst interntrainityjul 22 dec 22virtual internshipproject 1 using machine learning models i automated the resume screening process for job vacancies at a companyclassified resumes based on job requirements using unsupervised and supervised learning algorithmsoptimized the screening process with the bestperforming ml model using pkl and vectorizer modelsproject 2 i helped to develop and train an ml model that predicts stroke risk based on demographics and medical datautilized python and the scikitlearn library to build and finetune the model achieving high accuracy and performanceour model is a useful tool for healthcare professionals to identify highrisk patients and prevent strokesproject 3 i worked on user analytics and provided valuable insights to the marketing and investor teams of instagramperformed sql data analysis to find topinactive users contest winners popular hashtags and optimal ad launch daysevaluated user engagement and detected fake accounts to suggest datadriven improvements and maintain investor truststatistics guest lecturergovt first grade college sirsijan 21 jun 22sirsi insuccessfully trained 400 students in utilizing excel to solve diverse business problemsconducted insightful lectures on statistical concepts and assisted students in creating machine learning models in pythoneducationpost graduate diploma in data scienceiiit bangaloresecured 374 cgpamaster of science in statisticskarnatak university dharwadsecured 764certificationsdata analyst intern  trainitydata analytics training trainitydata science training internshalajan 22 mar 23bengaluru inaug 18 oct 20dharwad in'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# transforming text file\n","X = vectorizer.transform([text])"],"metadata":{"id":"F8uMPo9wXnMv","executionInfo":{"status":"ok","timestamp":1684505829409,"user_tz":-330,"elapsed":3,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# Predictions\n","y_pred = model.predict(X)\n","print(\"Predicted class:\", y_pred[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gq1nYXjVXxMQ","executionInfo":{"status":"ok","timestamp":1684505893372,"user_tz":-330,"elapsed":3,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}},"outputId":"d5358021-1d82-44fb-a2e2-87996108120c"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted class: 6\n"]}]},{"cell_type":"code","source":["# probability estimates\n","y_prob = model.predict_proba(X)\n","print('Predicted class:', y_pred[0], '\\n', 'Class Probability:', y_prob[0][y_pred[0]])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1zHx8yisYA4V","executionInfo":{"status":"ok","timestamp":1684506051705,"user_tz":-330,"elapsed":591,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}},"outputId":"482f5094-772d-4cda-93bd-201172924a95"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted class: 6 \n"," Class Probability: 1.0\n"]}]},{"cell_type":"code","source":["# Create dictionary with industrial and system engineering key terms by area\n","terms = {'Quality/Six Sigma':['black belt','capability analysis','control charts','doe','dmaic','fishbone',\n","                              'gage r&r', 'green belt','ishikawa','iso','kaizen','kpi','lean','metrics',\n","                              'pdsa','performance improvement','process improvement','quality',\n","                              'quality circles','quality tools','root cause','six sigma',\n","                              'stability analysis','statistical analysis','tqm'],      \n","        'Operations management':['automation','bottleneck','constraints','cycle time','efficiency','fmea',\n","                                 'machinery','maintenance','manufacture','line balancing','oee','operations',\n","                                 'operations research','optimization','overall equipment effectiveness',\n","                                 'pfmea','process','process mapping','production','resources','safety',\n","                                 'stoppage','value stream mapping','utilization'],\n","        'Supply chain':['abc analysis','apics','customer','customs','delivery','distribution','eoq','epq',\n","                        'fleet','forecast','inventory','logistic','materials','outsourcing','procurement',\n","                        'reorder point','rout','safety stock','scheduling','shipping','stock','suppliers',\n","                        'third party logistics','transport','transportation','traffic','supply chain',\n","                        'vendor','warehouse','wip','work in progress'],\n","        'Project management':['administration','agile','budget','cost','direction','feasibility analysis',\n","                              'finance','kanban','leader','leadership','management','milestones','planning',\n","                              'pmi','pmp','problem','project','risk','schedule','scrum','stakeholders'],\n","        'Data analytics':['analytics','api','aws','big data','busines intelligence','clustering','code',\n","                          'coding','data','database','data mining','data science','deep learning','hadoop',\n","                          'hypothesis test','iot','internet','machine learning','modeling','nosql','nlp',\n","                          'predictive','programming','python','r','sql','tableau','text mining',\n","                          'visualuzation'],\n","        'Healthcare':['adverse events','care','clinic','cphq','ergonomics','healthcare',\n","                      'health care','health','hospital','human factors','medical','near misses',\n","                      'patient','reporting system']}"],"metadata":{"id":"R3xnkeiDYiwP","executionInfo":{"status":"ok","timestamp":1684506114398,"user_tz":-330,"elapsed":410,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":["### Scores calculation per area"],"metadata":{"id":"YZPxJtZJY5sA"}},{"cell_type":"code","source":["# Initializie score counters for each area\n","quality = 0\n","operations = 0\n","supplychain = 0\n","project = 0\n","data = 0\n","healthcare = 0"],"metadata":{"id":"YJYoaBYyYr0Z","executionInfo":{"status":"ok","timestamp":1684506152582,"user_tz":-330,"elapsed":20,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["# Create an empty list where the scores will be stored\n","scores = []"],"metadata":{"id":"xneMINFGY_5u","executionInfo":{"status":"ok","timestamp":1684506163748,"user_tz":-330,"elapsed":683,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["# Obtain the scores for each area\n","for area in terms.keys():\n","        \n","    if area == 'Quality/Six Sigma':\n","        for word in terms[area]:\n","            if word in text:\n","                quality +=1\n","        scores.append(quality)\n","        \n","    elif area == 'Operations management':\n","        for word in terms[area]:\n","            if word in text:\n","                operations +=1\n","        scores.append(operations)\n","        \n","    elif area == 'Supply chain':\n","        for word in terms[area]:\n","            if word in text:\n","                supplychain +=1\n","        scores.append(supplychain)\n","        \n","    elif area == 'Project management':\n","        for word in terms[area]:\n","            if word in text:\n","                project +=1\n","        scores.append(project)\n","        \n","    elif area == 'Data analytics':\n","        for word in terms[area]:\n","            if word in text:\n","                data +=1\n","        scores.append(data)\n","        \n","    else:\n","        for word in terms[area]:\n","            if word in text:\n","                healthcare +=1\n","        scores.append(healthcare)\n"],"metadata":{"id":"EBAFkvKVZDGp","executionInfo":{"status":"ok","timestamp":1684506175430,"user_tz":-330,"elapsed":385,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":["### Scores Summary"],"metadata":{"id":"6NaLBFmcZGor"}},{"cell_type":"code","source":["import pandas as pd\n","# Create a data frame with the scores summary\n","summary = pd.DataFrame(scores,index=terms.keys(),columns=['score']).sort_values(by='score',ascending=False)\n","summary"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":237},"id":"vb9kMaesZF62","executionInfo":{"status":"ok","timestamp":1684506196705,"user_tz":-330,"elapsed":1924,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}},"outputId":"edc5647f-902b-41eb-9b26-bb9e199ba34e"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                       score\n","Data analytics            13\n","Project management         6\n","Healthcare                 5\n","Operations management      1\n","Quality/Six Sigma          0\n","Supply chain               0"],"text/html":["\n","  <div id=\"df-02c68ed3-261e-4b0d-97d5-090927134d98\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Data analytics</th>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>Project management</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Healthcare</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>Operations management</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Quality/Six Sigma</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Supply chain</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-02c68ed3-261e-4b0d-97d5-090927134d98')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-02c68ed3-261e-4b0d-97d5-090927134d98 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-02c68ed3-261e-4b0d-97d5-090927134d98');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","source":["### Visualizing skills score using pie char to a related fields"],"metadata":{"id":"ibrLWziYZNlT"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","from matplotlib.gridspec import GridSpec\n","import seaborn as sns\n","\n","# Create pie chart visualization\n","pie = plt.figure(figsize=(5,5))\n","# the_grid=GridSpec(2,2)\n","wedgeprops = {'linewidth': 2, 'edgecolor': 'white'}\n","\n","plt.pie(summary['score'], labels=summary.index, colors=sns.color_palette('cool') ,  autopct='%1.0f%%',shadow=True, wedgeprops=wedgeprops)\n","plt.title('Industrial Engineering Candidate - Resume Decomposition by Areas')\n","plt.axis('equal')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":444},"id":"_PNE8eYNZ2l8","executionInfo":{"status":"ok","timestamp":1684506763599,"user_tz":-330,"elapsed":2303,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}},"outputId":"7df75adf-82a0-4efb-9c50-51b5b9aa28a6"},"execution_count":50,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Save pie chart as a .png file\n","pie.savefig('resume_screening_results.png')"],"metadata":{"id":"BrwfohpUZQD8","executionInfo":{"status":"ok","timestamp":1684506224779,"user_tz":-330,"elapsed":5,"user":{"displayName":"vasundhara laxmish","userId":"14475369696659174790"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"jIJBtboxZRqC"},"execution_count":null,"outputs":[]}]}